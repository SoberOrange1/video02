{"version":3,"sources":["components/Controls.js","components/ProgressBar.js","components/VideoPlayer.js","App.js","index.js"],"names":["Controls","_ref","isPlaying","onPlayPause","_jsx","className","children","onClick","formatTime","time","minutes","Math","floor","seconds","concat","String","padStart","ProgressBar","currentTime","duration","onSeek","_jsxs","type","min","max","value","onChange","event","newTime","target","VideoPlayer","src","setIsPlaying","useState","setCurrentTime","setDuration","videoRef","useRef","handleTimeUpdate","current","handleLoadedMetadata","useEffect","video","addEventListener","removeEventListener","ref","controls","togglePlayPause","pause","play","App","ReactDOM","render","document","getElementById"],"mappings":"uNAaeA,MAVEC,IAAiC,IAAhC,UAAEC,EAAS,YAAEC,GAAaF,EACxC,OACIG,cAAA,OAAKC,UAAU,WAAUC,SACrBF,cAAA,UAAQG,QAASJ,EAAYG,SACxBJ,EAAY,QAAU,Y,MCJvC,MAuBMM,EAAcC,IAChB,MAAMC,EAAUC,KAAKC,MAAMH,EAAO,IAC5BI,EAAUF,KAAKC,MAAMH,EAAO,IAClC,MAAM,GAANK,OAAUC,OAAOL,GAASM,SAAS,EAAG,KAAI,KAAAF,OAAIC,OAAOF,GAASG,SAAS,EAAG,OAG/DC,MA7BKhB,IAAwC,IAAvC,YAAEiB,EAAW,SAAEC,EAAQ,OAAEC,GAAQnB,EAMlD,OACIoB,eAAA,OAAKhB,UAAU,eAAcC,SAAA,CACzBF,cAAA,SACIkB,KAAK,QACLC,IAAI,IACJC,IAAKL,EACLM,MAAOP,EACPQ,SAZUC,IAClB,MAAMC,EAAUD,EAAME,OAAOJ,MAC7BL,EAAOQ,IAWCvB,UAAU,wBAEdgB,eAAA,OAAKhB,UAAU,eAAcC,SAAA,CACxBE,EAAWU,GAAa,MAAIV,EAAWW,U,MCsDzCW,MArEK7B,IAAc,IAAb,IAAE8B,GAAK9B,EACxB,MAAOC,EAAW8B,GAAgBC,oBAAS,IACpCf,EAAagB,GAAkBD,mBAAS,IACxCd,EAAUgB,GAAeF,mBAAS,GACnCG,EAAWC,iBAAO,MAalBC,EAAmBA,KACjBF,EAASG,SACTL,EAAeE,EAASG,QAAQrB,cAIlCsB,EAAuBA,KACrBJ,EAASG,SACTJ,EAAYC,EAASG,QAAQpB,WAwBrC,OAbAsB,oBAAU,KACN,MAAMC,EAAQN,EAASG,QACvB,GAAIG,EAIA,OAHAA,EAAMC,iBAAiB,aAAcL,GACrCI,EAAMC,iBAAiB,iBAAkBH,GAElC,KACHE,EAAME,oBAAoB,aAAcN,GACxCI,EAAME,oBAAoB,iBAAkBJ,KAGrD,IAGCnB,eAAA,OAAKhB,UAAU,eAAcC,SAAA,CACzBF,cAAA,SACIyC,IAAKT,EACLL,IAAKA,EACLe,UAAU,IAEd1C,cAACJ,EAAQ,CACLE,UAAWA,EACXC,YApDY4C,KAChBX,EAASG,UACLrC,EACAkC,EAASG,QAAQS,QAEjBZ,EAASG,QAAQU,OAErBjB,GAAc9B,OA+CdE,cAACa,EAAW,CACRC,YAAaA,EACbC,SAAUA,EACVC,OAlCQX,IACZ2B,EAASG,UACTH,EAASG,QAAQrB,YAAcT,EAC/ByB,EAAezB,WCxBZyC,MAVHA,IAEJ9C,cAAA,OAAKC,UAAU,MAAKC,SAChBF,cAAC0B,EAAW,CACRC,IAAI,uECHpBoB,IAASC,OAAOhD,cAAC8C,EAAG,IAAKG,SAASC,eAAe,Q","file":"static/js/main.54cc773e.chunk.js","sourcesContent":["import React from 'react';\nimport './Controls.css';\n\nconst Controls = ({ isPlaying, onPlayPause }) => {\n    return (\n        <div className=\"controls\">\n            <button onClick={onPlayPause}>\n                {isPlaying ? 'Pause' : 'Play'}\n            </button>\n        </div>\n    );\n};\n\nexport default Controls;","import React from 'react';\nimport './ProgressBar.css';\n\nconst ProgressBar = ({ currentTime, duration, onSeek }) => {\n    const handleChange = (event) => {\n        const newTime = event.target.value;\n        onSeek(newTime);\n    };\n\n    return (\n        <div className=\"progress-bar\">\n            <input\n                type=\"range\"\n                min=\"0\"\n                max={duration}\n                value={currentTime}\n                onChange={handleChange}\n                className=\"progress-bar-slider\"\n            />\n            <div className=\"time-display\">\n                {formatTime(currentTime)} / {formatTime(duration)}\n            </div>\n        </div>\n    );\n};\n\nconst formatTime = (time) => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n};\n\nexport default ProgressBar;","import React, { useState, useRef, useEffect } from 'react';\nimport Controls from './Controls';\nimport ProgressBar from './ProgressBar';\nimport './VideoPlayer.css';\n\nconst VideoPlayer = ({ src }) => {\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [currentTime, setCurrentTime] = useState(0);\n    const [duration, setDuration] = useState(0);\n    const videoRef = useRef(null);\n\n    const togglePlayPause = () => {\n        if (videoRef.current) {\n            if (isPlaying) {\n                videoRef.current.pause();\n            } else {\n                videoRef.current.play();\n            }\n            setIsPlaying(!isPlaying);\n        }\n    };\n\n    const handleTimeUpdate = () => {\n        if (videoRef.current) {\n            setCurrentTime(videoRef.current.currentTime);\n        }\n    };\n\n    const handleLoadedMetadata = () => {\n        if (videoRef.current) {\n            setDuration(videoRef.current.duration);\n        }\n    };\n\n    const handleSeek = (time) => {\n        if (videoRef.current) {\n            videoRef.current.currentTime = time;\n            setCurrentTime(time);\n        }\n    };\n\n    useEffect(() => {\n        const video = videoRef.current;\n        if (video) {\n            video.addEventListener('timeupdate', handleTimeUpdate);\n            video.addEventListener('loadedmetadata', handleLoadedMetadata);\n            \n            return () => {\n                video.removeEventListener('timeupdate', handleTimeUpdate);\n                video.removeEventListener('loadedmetadata', handleLoadedMetadata);\n            };\n        }\n    }, []);\n\n    return (\n        <div className=\"video-player\">\n            <video \n                ref={videoRef}\n                src={src}\n                controls={false}\n            />\n            <Controls \n                isPlaying={isPlaying}\n                onPlayPause={togglePlayPause}\n            />\n            <ProgressBar \n                currentTime={currentTime}\n                duration={duration}\n                onSeek={handleSeek}\n            />\n        </div>\n    );\n};\n\nexport default VideoPlayer;","import React from 'react';\nimport VideoPlayer from './components/VideoPlayer';\n\nconst App = () => {\n    return (\n        <div className=\"app\">\n            <VideoPlayer \n                src=\"https://surgvision.s3.ap-northeast-3.amazonaws.com/cropped_3.mp4\"\n            />\n        </div>\n    );\n};\n\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}